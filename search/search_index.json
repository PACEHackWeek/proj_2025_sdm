{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to sdm!","text":"<p>This package has some functions to create sdms that use remote-sensing data.</p>"},{"location":"#examples","title":"Examples","text":"<ul> <li>simple_bbbox</li> </ul>"},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#sdmsimple_bbox","title":"sdm.simple_bbox","text":"<p>Plot a bounding box on a global map using Cartopy.</p> <p>This function displays a world map with coastlines and borders, and overlays a red bounding box. Optionally, it can render the Earth as a globe using Orthographic projection centered on the bounding box.</p>"},{"location":"reference/#sdm.simple_bbox--parameters","title":"Parameters","text":"<p>bbox : list or tuple of float     Bounding box in [min_lon, min_lat, max_lon, max_lat] format.</p> str, optional <p>Map projection to use. Options include:     - 'PlateCarree' (default)     - 'Robinson'     - 'Mollweide'     - 'Mercator'     - 'EqualEarth'     - 'InterruptedGoodeHomolosine'     - 'globe' (for Orthographic projection centered on the bbox)</p>"},{"location":"reference/#sdm.simple_bbox--returns","title":"Returns","text":"<p>None     Displays the plot using matplotlib.</p>"},{"location":"reference/#sdm.simple_bbox--example","title":"Example","text":"<p>plot_global_bbox([-25, 10, -10, 30], projection='globe')</p> Source code in <code>src/sdm/viz.py</code> <pre><code>def simple_bbox(bbox, projection='PlateCarree'):\n    \"\"\"\n    Plot a bounding box on a global map using Cartopy.\n\n    This function displays a world map with coastlines and borders, and overlays\n    a red bounding box. Optionally, it can render the Earth as a globe using\n    Orthographic projection centered on the bounding box.\n\n    Parameters\n    ----------\n    bbox : list or tuple of float\n        Bounding box in [min_lon, min_lat, max_lon, max_lat] format.\n\n    projection : str, optional\n        Map projection to use. Options include:\n            - 'PlateCarree' (default)\n            - 'Robinson'\n            - 'Mollweide'\n            - 'Mercator'\n            - 'EqualEarth'\n            - 'InterruptedGoodeHomolosine'\n            - 'globe' (for Orthographic projection centered on the bbox)\n\n    Returns\n    -------\n    None\n        Displays the plot using matplotlib.\n\n    Example\n    -------\n    &gt;&gt;&gt; plot_global_bbox([-25, 10, -10, 30], projection='globe')\n    \"\"\"\n    if not (isinstance(bbox, (list, tuple)) and len(bbox) == 4):\n        raise ValueError(\"bbox must be a list or tuple of four floats: [min_lon, min_lat, max_lon, max_lat]\")\n\n    min_lon, min_lat, max_lon, max_lat = bbox\n\n    # Projection handling\n    projection_dict = {\n        'PlateCarree': ccrs.PlateCarree(),\n        'Robinson': ccrs.Robinson(),\n        'Mollweide': ccrs.Mollweide(),\n        'Mercator': ccrs.Mercator(),\n        'EqualEarth': ccrs.EqualEarth(),\n        'InterruptedGoodeHomolosine': ccrs.InterruptedGoodeHomolosine(),\n    }\n\n    if projection == 'globe':\n        center_lon = (min_lon + max_lon) / 2\n        center_lat = (min_lat + max_lat) / 2\n        proj = ccrs.Orthographic(central_longitude=center_lon, central_latitude=center_lat)\n    elif projection in projection_dict:\n        proj = projection_dict[projection]\n    else:\n        raise ValueError(f\"Unsupported projection '{projection}'. Choose from {list(projection_dict.keys()) + ['globe']}.\")\n\n    # Plot setup\n    fig, ax = plt.subplots(figsize=(12, 6), subplot_kw={\"projection\": proj})\n    if projection == 'globe':\n        ax.set_global()\n    else:\n        ax.set_global()\n\n    ax.coastlines()\n    ax.add_feature(cfeature.LAND, facecolor=\"lightgray\")\n    ax.add_feature(cfeature.BORDERS, linestyle=\":\")\n    if projection != 'globe':\n        ax.gridlines(draw_labels=True, crs=ccrs.PlateCarree())\n\n    # Bounding box\n    gdf = gpd.GeoDataFrame(\n        geometry=[box(min_lon, min_lat, max_lon, max_lat)],\n        crs=\"EPSG:4326\"\n    )\n    gdf.boundary.plot(ax=ax, edgecolor=\"red\", linewidth=2, transform=ccrs.PlateCarree())\n\n    title = \"Study Area\"\n    ax.set_title(title, fontsize=14)\n    plt.show()\n</code></pre>"},{"location":"examples/simple_bbox/","title":"simple_bbox","text":"In\u00a0[1]: Copied! <pre>import sdm\n\nbbox = [-25, 10, -10, 30]\nsdm.simple_bbox(bbox, projection='Robinson')\n</pre> import sdm  bbox = [-25, 10, -10, 30] sdm.simple_bbox(bbox, projection='Robinson') In\u00a0[5]: Copied! <pre>paceship.simple_bbox(bbox, projection='globe')\n</pre> paceship.simple_bbox(bbox, projection='globe') In\u00a0[2]: Copied! <pre>sdm.simple_bbox(bbox)\n</pre> sdm.simple_bbox(bbox) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/simple_bbox/#simple_bbox","title":"simple_bbox\u00b6","text":"<p>Make a map of world with your study area in red.</p>"}]}