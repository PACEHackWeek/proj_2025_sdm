{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to sdm!","text":"<p>This package has some examples and functions to create sdms that use remote-sensing data (emphasis on PACE data).</p> <p></p>"},{"location":"#examples","title":"Examples","text":"<ul> <li>simple_bbbox to plot study location</li> <li>trawl_viz load and vizualize the example trawl data</li> </ul>"},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#visualization","title":"Visualization","text":""},{"location":"reference/#sdmsimple_bbox","title":"sdm.simple_bbox","text":""},{"location":"reference/#sdm.simple_bbox","title":"<code>sdm.simple_bbox(bbox, projection='PlateCarree')</code>","text":"<p>Plot a bounding box on a global map using Cartopy.</p> <p>This function displays a world map with coastlines and borders, and overlays a red bounding box. Optionally, it can render the Earth as a globe using Orthographic projection centered on the bounding box.</p>"},{"location":"reference/#sdm.simple_bbox--parameters","title":"Parameters","text":"<p>bbox : list or tuple of float     Bounding box in [min_lon, min_lat, max_lon, max_lat] format.</p> str, optional <p>Map projection to use. Options include:     - 'PlateCarree' (default)     - 'Robinson'     - 'Mollweide'     - 'Mercator'     - 'EqualEarth'     - 'InterruptedGoodeHomolosine'     - 'globe' (for Orthographic projection centered on the bbox)</p>"},{"location":"reference/#sdm.simple_bbox--returns","title":"Returns","text":"<p>None     Displays the plot using matplotlib.</p>"},{"location":"reference/#sdm.simple_bbox--example","title":"Example","text":"<p>plot_global_bbox([-25, 10, -10, 30], projection='globe')</p> Source code in <code>src/sdm/viz.py</code> <pre><code>def simple_bbox(bbox, projection='PlateCarree'):\n    \"\"\"\n    Plot a bounding box on a global map using Cartopy.\n\n    This function displays a world map with coastlines and borders, and overlays\n    a red bounding box. Optionally, it can render the Earth as a globe using\n    Orthographic projection centered on the bounding box.\n\n    Parameters\n    ----------\n    bbox : list or tuple of float\n        Bounding box in [min_lon, min_lat, max_lon, max_lat] format.\n\n    projection : str, optional\n        Map projection to use. Options include:\n            - 'PlateCarree' (default)\n            - 'Robinson'\n            - 'Mollweide'\n            - 'Mercator'\n            - 'EqualEarth'\n            - 'InterruptedGoodeHomolosine'\n            - 'globe' (for Orthographic projection centered on the bbox)\n\n    Returns\n    -------\n    None\n        Displays the plot using matplotlib.\n\n    Example\n    -------\n    &gt;&gt;&gt; plot_global_bbox([-25, 10, -10, 30], projection='globe')\n    \"\"\"\n    if not (isinstance(bbox, (list, tuple)) and len(bbox) == 4):\n        raise ValueError(\"bbox must be a list or tuple of four floats: [min_lon, min_lat, max_lon, max_lat]\")\n\n    min_lon, min_lat, max_lon, max_lat = bbox\n\n    # Projection handling\n    projection_dict = {\n        'PlateCarree': ccrs.PlateCarree(),\n        'Robinson': ccrs.Robinson(),\n        'Mollweide': ccrs.Mollweide(),\n        'Mercator': ccrs.Mercator(),\n        'EqualEarth': ccrs.EqualEarth(),\n        'InterruptedGoodeHomolosine': ccrs.InterruptedGoodeHomolosine(),\n    }\n\n    if projection == 'globe':\n        center_lon = (min_lon + max_lon) / 2\n        center_lat = (min_lat + max_lat) / 2\n        proj = ccrs.Orthographic(central_longitude=center_lon, central_latitude=center_lat)\n    elif projection in projection_dict:\n        proj = projection_dict[projection]\n    else:\n        raise ValueError(f\"Unsupported projection '{projection}'. Choose from {list(projection_dict.keys()) + ['globe']}.\")\n\n    # Plot setup\n    fig, ax = plt.subplots(figsize=(12, 6), subplot_kw={\"projection\": proj})\n    if projection == 'globe':\n        ax.set_global()\n    else:\n        ax.set_global()\n\n    ax.coastlines()\n    ax.add_feature(cfeature.LAND, facecolor=\"lightgray\")\n    ax.add_feature(cfeature.BORDERS, linestyle=\":\")\n    if projection != 'globe':\n        ax.gridlines(draw_labels=True, crs=ccrs.PlateCarree())\n\n    # Bounding box\n    gdf = gpd.GeoDataFrame(\n        geometry=[box(min_lon, min_lat, max_lon, max_lat)],\n        crs=\"EPSG:4326\"\n    )\n    gdf.boundary.plot(ax=ax, edgecolor=\"red\", linewidth=2, transform=ccrs.PlateCarree())\n\n    title = \"Study Area\"\n    ax.set_title(title, fontsize=14)\n    plt.show()\n</code></pre>"},{"location":"reference/#data-access","title":"Data Access","text":""},{"location":"reference/#sdmload_trawl_data","title":"sdm.load_trawl_data","text":""},{"location":"reference/#sdm.load_trawl_data","title":"<code>sdm.load_trawl_data()</code>","text":"<p>Load example trawl abundance data from NE trawl survey.</p> <p>This dataset contains species abundance observations collected from tows along with metadata like date, location, depth, and swept area.</p>"},{"location":"reference/#sdm.load_trawl_data--returns","title":"Returns","text":"<p>pd.DataFrame     A DataFrame with columns:     - <code>TOWDATETIME_EST</code> (str): Tow start datetime in EST     - <code>LAT</code>, <code>LON</code> (float): Latitude and longitude of the tow     - <code>MEAN_DEPTH</code> (float): Mean depth in meters     - <code>SWEPT_AREA_km</code> (float): Swept area in square kilometers     - One column per species (e.g., <code>acadian redfish</code>, <code>alewife</code>, ..., <code>yellowtail flounder</code>)       with counts or presence/absence data.</p>"},{"location":"reference/#sdm.load_trawl_data--example","title":"Example","text":"<p>df = load_trawl_data() df[['LAT', 'LON', 'acadian redfish']].head()</p> Source code in <code>src/sdm/access_data.py</code> <pre><code>def load_trawl_data():\n    \"\"\"\n    Load example trawl abundance data from NE trawl survey.\n\n    This dataset contains species abundance observations collected from tows\n    along with metadata like date, location, depth, and swept area.\n\n    Returns\n    -------\n    pd.DataFrame\n        A DataFrame with columns:\n        - `TOWDATETIME_EST` (str): Tow start datetime in EST\n        - `LAT`, `LON` (float): Latitude and longitude of the tow\n        - `MEAN_DEPTH` (float): Mean depth in meters\n        - `SWEPT_AREA_km` (float): Swept area in square kilometers\n        - One column per species (e.g., `acadian redfish`, `alewife`, ..., `yellowtail flounder`)\n          with counts or presence/absence data.\n\n    Example\n    -------\n    df = load_trawl_data()\n    df[['LAT', 'LON', 'acadian redfish']].head()\n    \"\"\"\n    with pkg_resources.files(data).joinpath(\"trawl.csv\").open(\"r\") as f:\n        return pd.read_csv(f)\n</code></pre>"},{"location":"examples/simple_bbox/","title":"simple_bbox","text":"In\u00a0[1]: Copied! <pre>import sdm\n\nbbox = [-25, 10, -10, 30]\nsdm.simple_bbox(bbox, projection='Robinson')\n</pre> import sdm  bbox = [-25, 10, -10, 30] sdm.simple_bbox(bbox, projection='Robinson') In\u00a0[5]: Copied! <pre>sdm.simple_bbox(bbox, projection='globe')\n</pre> sdm.simple_bbox(bbox, projection='globe') In\u00a0[2]: Copied! <pre>sdm.simple_bbox(bbox)\n</pre> sdm.simple_bbox(bbox) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/simple_bbox/#simple_bbox","title":"simple_bbox\u00b6","text":"<p>Make a map of world with your study area in red.</p>"},{"location":"examples/trawl_viz/","title":"load_trawl_data","text":"In\u00a0[4]: Copied! <pre>import sdm\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cartopy\nimport numpy as np\n</pre> import sdm import pandas as pd import matplotlib.pyplot as plt import cartopy import numpy as np In\u00a0[2]: Copied! <pre>df = sdm.load_trawl_data()\ndf\n</pre> df = sdm.load_trawl_data() df Out[2]: TOWDATETIME_EST LAT LON MEAN_DEPTH SWEPT_AREA_km acadian redfish alewife alligatorfish american lobster american plaice ... Rrs_707 Rrs_708 Rrs_709 Rrs_711 Rrs_712 Rrs_713 Rrs_714 Rrs_717 Rrs_719 Rrs_brightness 0 2024-03-07 10:58:00 38.659194 -74.828083 24 0.021282 0.0 0.0 0.0 0.0 0.0 ... 0.000851 0.000825 0.000797 0.000765 0.000738 0.000717 0.000689 0.000552 0.000540 1.090205 1 2024-03-07 14:32:00 38.498596 -74.477395 40 0.024311 0.0 0.0 0.0 0.0 0.0 ... 0.000386 0.000378 0.000364 0.000344 0.000333 0.000325 0.000315 0.000229 0.000261 0.907649 2 2024-03-07 17:44:00 38.411974 -74.502885 39 0.023835 0.0 0.0 0.0 0.0 0.0 ... 0.000372 0.000364 0.000350 0.000330 0.000318 0.000310 0.000292 0.000210 0.000254 0.935354 3 2024-03-07 20:29:00 38.505238 -74.832046 25 0.021510 0.0 0.0 0.0 1.0 0.0 ... 0.000674 0.000653 0.000632 0.000606 0.000588 0.000574 0.000553 0.000430 0.000434 1.050127 4 2024-03-07 22:45:00 38.556784 -74.897495 21 0.019174 0.0 0.0 0.0 27.0 0.0 ... 0.001309 0.001268 0.001221 0.001175 0.001134 0.001093 0.001046 0.000848 0.000791 1.327782 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 363 2024-05-12 12:30:00 41.305711 -70.636614 23 0.018435 0.0 0.0 0.0 0.0 0.0 ... 0.000283 0.000275 0.000266 0.000253 0.000246 0.000243 0.000237 0.000181 0.000218 0.529729 364 2024-05-12 18:45:00 40.467061 -71.381195 73 0.022568 0.0 2.0 0.0 2.0 0.0 ... 0.000159 0.000155 0.000150 0.000142 0.000140 0.000137 0.000138 0.000097 0.000150 0.446814 365 2024-05-13 01:19:00 39.618178 -72.027289 219 0.024705 0.0 0.0 0.0 0.0 0.0 ... 0.000108 0.000104 0.000102 0.000094 0.000093 0.000094 0.000095 0.000057 0.000104 0.450264 366 2024-05-13 03:42:00 39.762143 -72.213598 98 0.020737 0.0 1.0 0.0 0.0 0.0 ... 0.000146 0.000143 0.000141 0.000134 0.000134 0.000133 0.000130 0.000068 0.000124 0.446797 367 2024-05-13 07:15:00 40.175585 -71.934953 76 0.023215 0.0 4.0 0.0 1.0 0.0 ... 0.000162 0.000159 0.000155 0.000148 0.000147 0.000145 0.000142 0.000082 0.000137 0.421705 <p>368 rows \u00d7 372 columns</p> In\u00a0[6]: Copied! <pre>matched=[]\nfor item in df.columns:\n    if 'Rrs' in item:  # Using the 'in' operator for substring check\n        pass\n    else: \n        matched.append(item)\n\nsub = df[list(matched)].copy() #subset (remove RRS columns) \nsub['station'] = np.arange(1,len(sub)+1) #add station col\n\ntot_sum = {}\nfor s in sub.columns[5:-2]:\n   tot_sum.update({s:int(sub[s].sum())})  #get total sum of all values \n\nsorted_tot_sum = sorted(tot_sum.items(), key=lambda item: item[1],reverse=True) #sort by max--&gt;min\n\n\nabu=[]\nfor val in sorted_tot_sum:\n    if val[1]&gt;50000: #if more than 50000 observations \n        abu.append(val[0])\nabu\n</pre> matched=[] for item in df.columns:     if 'Rrs' in item:  # Using the 'in' operator for substring check         pass     else:          matched.append(item)  sub = df[list(matched)].copy() #subset (remove RRS columns)  sub['station'] = np.arange(1,len(sub)+1) #add station col  tot_sum = {} for s in sub.columns[5:-2]:    tot_sum.update({s:int(sub[s].sum())})  #get total sum of all values   sorted_tot_sum = sorted(tot_sum.items(), key=lambda item: item[1],reverse=True) #sort by max--&gt;min   abu=[] for val in sorted_tot_sum:     if val[1]&gt;50000: #if more than 50000 observations          abu.append(val[0]) abu Out[6]: <pre>['butterfish',\n 'silver hake',\n 'longfin squid',\n 'spot',\n 'northern searobin',\n 'atlantic croaker']</pre> <p>This is a single survey in 2024.</p> In\u00a0[13]: Copied! <pre>df['TOWDATETIME_EST'] = pd.to_datetime(df['TOWDATETIME_EST'])\ndf['TOWDATETIME_EST'].agg(['min', 'max'])\n</pre> df['TOWDATETIME_EST'] = pd.to_datetime(df['TOWDATETIME_EST']) df['TOWDATETIME_EST'].agg(['min', 'max']) Out[13]: <pre>min   2024-03-07 10:58:00\nmax   2024-05-13 07:15:00\nName: TOWDATETIME_EST, dtype: datetime64[ns]</pre> <p>Each station appears once.</p> In\u00a0[10]: Copied! <pre>station_counts = sub['station'].value_counts().sort_index()\nstation_counts = station_counts.rename(\"count\").reset_index()\nstation_counts.columns = [\"station\", \"count\"]\nstation_counts['count'].unique()\n</pre> station_counts = sub['station'].value_counts().sort_index() station_counts = station_counts.rename(\"count\").reset_index() station_counts.columns = [\"station\", \"count\"] station_counts['count'].unique() Out[10]: <pre>array([1])</pre> In\u00a0[15]: Copied! <pre>for s in sub[abu].columns:\n    plt.plot(sub.station, sub[s],label=s)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', )\nplt.xlabel('Station #')\nplt.ylabel('Count')\nplt.title('Species with more than 50000 observations')\nplt.show()\n</pre> for s in sub[abu].columns:     plt.plot(sub.station, sub[s],label=s) plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', ) plt.xlabel('Station #') plt.ylabel('Count') plt.title('Species with more than 50000 observations') plt.show() <p>Map the species presence/absence by station location.</p> In\u00a0[22]: Copied! <pre>import matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\nfig, axs = plt.subplots(2, 3, figsize=(12, 8), subplot_kw={'projection': ccrs.PlateCarree()})\naxs = axs.flatten()\n\nabsent_color = 'gray'\npresent_color = 'orange'\n\nfor i, ax in enumerate(axs):\n    species = sub[abu].columns[i]\n    absent = sub[sub[species] == 0]\n    present = sub[sub[species] != 0]\n\n    ax.scatter(absent.LON, absent.LAT, c=absent_color, s=8, label='Absent')\n    ax.scatter(present.LON, present.LAT, c=present_color, s=8, label='Present')\n\n    ax.add_feature(cfeature.COASTLINE, linewidth=1)\n    ax.add_feature(cfeature.LAND, zorder=100, facecolor='lightgrey')\n    ax.set_title(species)\n\n    # Add legend only to the first subplot to avoid repetition\n    ax.legend(loc='lower right')\n\nfig.suptitle('Species Presence by Station', fontsize=14)\nplt.tight_layout()\nplt.show()\n</pre> import matplotlib.pyplot as plt import cartopy.crs as ccrs import cartopy.feature as cfeature  fig, axs = plt.subplots(2, 3, figsize=(12, 8), subplot_kw={'projection': ccrs.PlateCarree()}) axs = axs.flatten()  absent_color = 'gray' present_color = 'orange'  for i, ax in enumerate(axs):     species = sub[abu].columns[i]     absent = sub[sub[species] == 0]     present = sub[sub[species] != 0]      ax.scatter(absent.LON, absent.LAT, c=absent_color, s=8, label='Absent')     ax.scatter(present.LON, present.LAT, c=present_color, s=8, label='Present')      ax.add_feature(cfeature.COASTLINE, linewidth=1)     ax.add_feature(cfeature.LAND, zorder=100, facecolor='lightgrey')     ax.set_title(species)      # Add legend only to the first subplot to avoid repetition     ax.legend(loc='lower right')  fig.suptitle('Species Presence by Station', fontsize=14) plt.tight_layout() plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/trawl_viz/#load_trawl_data","title":"load_trawl_data\u00b6","text":"<p>Author: Hayley</p> <p>Load and vizualize the trawl data.</p>"},{"location":"examples/trawl_viz/#most-common-species","title":"Most common species\u00b6","text":"<p>Let's get species with abuncance &gt; 50000.</p>"},{"location":"examples/trawl_viz/#make-a-plot","title":"Make a plot\u00b6","text":"<p>Look at the abundances by station.</p>"}]}